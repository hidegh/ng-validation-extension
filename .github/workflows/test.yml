name: Test

on:
  
  workflow_dispatch:
    inputs:
      comment:
        description: Just a dummy input parameter
        default: "Hello world"
        type: "string"

  # disabled due to tests

  # push:
  #   branches:
  #     - master
  #     - main

env:
  libName: lib
  appName: sample
  appDist: dist/sample
  appBaseHref: /nx-validation-extension/
  NEXT_VERSION:
  NEXT_VERSION2:
  NEXT_MAJOR:
  NEXT_MINOR:
  NEXT_PATCH:

jobs:
  
  # get_next_version:
  #   script:
  #     - npx semantic-release --dry-run --branches master,$CI_COMMIT_REF_NAME --no-ci
  #     - test -e .VERSION || (echo $(git describe --abbrev=0 --tags | tr -d v) > .VERSION && touch .NORELEASE)
  #     - echo "Determined Version $(cat .VERSION)"
  #   artifacts:
  #     paths:
  #       - .VERSION
  #       - .NORELEASE
  #     expire_in: 1 week
  #   rules:
  #     - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_TAG == null
  #     - if: $CI_MERGE_REQUEST_ID

  # use_next_version:
  #   needs: get_next_version
  #   script:
  #     - VERSION=$(cat .VERSION)
  #     - VERSION_MAJOR=$(echo $VERSION | cut -d. -f1)
  #     - VERSION_MINOR=$(echo $VERSION | cut -d. -f2)
  #     - VERSION_PATCH=$(echo $VERSION | cut -d. -f3)
  #     - echo "Version = $VERSION, Ma = $VERSION_MAJOR, Mi = $VERSION_MINOR, Pa = $VERSION_PATCH"

  workflow:

    permissions:
      contents: write
      issues: write
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      
      - run: npm install
  
      - name: TEST NEXT VER
        run: |
          echo "Branch $GITHUB_REF_NAME"
          npx semantic-release --dry-run --no-ci
          test -e .VERSION || (echo $(git describe --abbrev=0 --tags | tr -d v) > .VERSION && touch .NORELEASE)
          echo "Determined Version $(cat .VERSION)"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze Commits
        run: |
          npx semantic-release --branches main --extends @semantic-release/commit-analyzer --dry-run
          export NEXT_VERSION=$(npx semantic-release --branches main --extends @semantic-release/commit-analyzer --dry-run | grep 'Next version' | awk '{print $3}')

      - name: Print next version
        run: |
          echo "Next version: $NEXT_VERSION"

      - run: |
          npx semantic-release -e @semantic-release/commit-analyzer --dry-run
          export NEXT_VERSION2=$(npx semantic-release -e @semantic-release/commit-analyzer --dry-run | grep 'Next version' | awk '{print $3}')
          export NEXT_MAJOR=$(echo $NEXT_VERSION | awk -F '.' '{print $1}')
          export NEXT_MINOR=$(echo $NEXT_VERSION | awk -F '.' '{print $2}')
          export NEXT_PATCH=$(echo $NEXT_VERSION | awk -F '.' '{print $3}')

      - name: Print next version
        run: |
          echo "Next NEXT_VERSION2: $NEXT_VERSION2"
          echo "Next NEXT_MAJOR: $NEXT_MAJOR"
          echo "Next NEXT_MINOR: $NEXT_MINOR"
          echo "Next NEXT_PATCH: $NEXT_PATCH"
        

